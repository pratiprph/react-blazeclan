{"version":3,"sources":["Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["Canvas","useState","isDrawing","setIsDrawing","canvasRef","useRef","contextRef","color","o","Math","round","r","random","toFixed","color_gen","console","log","bgcolor","setBgColor","useEffect","canvas","current","width","window","innerWidth","height","innerHeight","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","prepareCanvas","onMouseDown","nativeEvent","offsetX","offsetY","beginPath","moveTo","onMouseUp","closePath","onMouseMove","lineTo","stroke","ref","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLA2GeA,MAzGf,WAAkB,IAAD,EAEmBC,oBAAS,GAF5B,mBAERC,EAFQ,KAEGC,EAFH,KAGTC,EAAYC,iBAAO,MACnBC,EAAaD,iBAAO,MAOtBE,EALc,WAChB,IAAIC,EAAIC,KAAKC,MAAOC,EAAIF,KAAKG,OAC7B,MAAO,QAAUJ,EADwB,IACtBG,KAAS,IAAMH,EADO,IACLG,KAAS,IAAMH,EADV,IACYG,KAAS,IAAMA,IAAIE,QAAQ,GAAK,IAG3EC,GACZC,QAAQC,IAAIT,GAZG,MAcgBN,mBAASM,GAdzB,mBAcRU,EAdQ,KAcCC,EAdD,KAiEf,OAJAC,qBAAU,YA7CY,WACpB,IAAMC,EAAShB,EAAUiB,QACzBD,EAAOE,MAA4B,EAApBC,OAAOC,WACtBJ,EAAOK,OAA8B,EAArBF,OAAOG,YACvBN,EAAOO,MAAML,MAAb,UAAwBC,OAAOC,WAA/B,MACAJ,EAAOO,MAAMF,OAAb,UAAyBF,OAAOG,YAAhC,MAEA,IAAME,EAAUR,EAAOS,WAAW,MAClCD,EAAQE,MAAM,EAAG,GACjBF,EAAQG,QAAU,QAClBH,EAAQI,YAAR,UAAyBf,GACzBW,EAAQK,UAAY,EACpB3B,EAAWe,QAAUO,EAkCrBM,KACC,IAGD,gCACE,oEACF,wBACAC,YAtCmB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACdC,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QACjBhC,EAAWe,QAAQkB,YACnBjC,EAAWe,QAAQmB,OAAOH,EAASC,GACnCnC,GAAa,IAmCbsC,UAhCoB,WACpBnC,EAAWe,QAAQqB,YACnBvC,GAAa,GACbe,EAAWX,GACXQ,QAAQC,IAAIT,IA6BZoC,YA1BW,SAAC,GAAqB,IAAnBP,EAAkB,EAAlBA,YACd,GAAKlC,EAAL,CADgC,IAIxBmC,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QACjBhC,EAAWe,QAAQuB,OAAOP,EAASC,GACnChC,EAAWe,QAAQwB,WAqBnBC,IAAK1C,QC9DM2C,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.23426f88.chunk.js","sourcesContent":["import React,{ useRef, useState,useEffect } from 'react';\r\n\r\nfunction Canvas(){\r\n\r\n  const [isDrawing, setIsDrawing] = useState(false)\r\n  const canvasRef = useRef(null);\r\n  const contextRef = useRef(null);\r\n\r\n  const color_gen = ()=>{\r\n    var o = Math.round, r = Math.random, s = 255;\r\n    return 'rgba(' + o(r()*s) + ',' + o(r()*s) + ',' + o(r()*s) + ',' + r().toFixed(1) + ')';\r\n  }\r\n\r\n  let color = color_gen();\r\n  console.log(color)\r\n\r\n  const [bgcolor, setBgColor ] = useState(color)\r\n\r\n  const prepareCanvas = () => {\r\n    const canvas = canvasRef.current\r\n    canvas.width = window.innerWidth * 2;\r\n    canvas.height = window.innerHeight * 2;\r\n    canvas.style.width = `${window.innerWidth}px`;\r\n    canvas.style.height = `${window.innerHeight}px`;\r\n\r\n    const context = canvas.getContext(\"2d\")\r\n    context.scale(2, 2);\r\n    context.lineCap = \"round\";\r\n    context.strokeStyle = `${bgcolor}`;\r\n    context.lineWidth = 5;\r\n    contextRef.current = context;\r\n  };\r\n\r\n  const startDrawing = ({ nativeEvent }) => {\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    contextRef.current.beginPath();\r\n    contextRef.current.moveTo(offsetX, offsetY);\r\n    setIsDrawing(true);\r\n  };\r\n\r\n  const finishDrawing = () => {\r\n    contextRef.current.closePath();\r\n    setIsDrawing(false);\r\n    setBgColor(color)\r\n    console.log(color)\r\n  };\r\n\r\n  const draw = ({ nativeEvent }) => {\r\n    if (!isDrawing) {\r\n      return;\r\n    }\r\n    const { offsetX, offsetY } = nativeEvent;\r\n    contextRef.current.lineTo(offsetX, offsetY);\r\n    contextRef.current.stroke();\r\n  };\r\n\r\n  const clearCanvas = () => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\")\r\n    context.fillStyle = \"white\"\r\n    context.fillRect(0, 0, canvas.width, canvas.height)\r\n  }\r\n\r\n  useEffect(() => {\r\n    prepareCanvas();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <p>On mouse drag we can draw some this</p>\r\n    <canvas\r\n    onMouseDown={startDrawing}\r\n    onMouseUp={finishDrawing}\r\n    onMouseMove={draw}\r\n    ref={canvasRef}\r\n  />\r\n  </div>\r\n  )\r\n}\r\n\r\n// class Canvas extends Component {\r\n\r\n       \r\n//        color = '#'+(0x1000000+(Math.random())*0xffffff).toString(16).substr(1,6)\r\n       \r\n//        drawImage = (event)=>{\r\n//            console.log(this.color)\r\n//         const canvas = this.refs.canvas\r\n//         const ctx = canvas.getContext(\"2d\")\r\n//          ctx.beginPath();\r\n//          ctx.fillStyle = 'red'\r\n//          ctx.rect(event.pageX, event.pageY,50,50);\r\n//          console.log(event.pageX)\r\n//          //ctx.stroke();\r\n//       }\r\n\r\n//   render(){\r\n//     return (\r\n//         <div>\r\n          \r\n//           <canvas ref=\"canvas\" style={{width:600,height:500,border:\"1px solid red\"}} onClick={this.drawImage.bind(this)}/>\r\n          \r\n//         </div>\r\n//       );\r\n//   }\r\n// }\r\n\r\nexport default Canvas;\r\n","import React,{ useState } from 'react';\nimport Canvas from './Canvas'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}